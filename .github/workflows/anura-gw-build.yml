name: Anura Gateway reusable workflow

on:
  workflow_dispatch:
  push:

concurrency: ${{ github.workflow }} # Do not permit concurrent builds for the same workflow

jobs:
  generate_model:
    name: Generate model
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.OIDC_ROLE_AWS_REGION }}

      - name: Use CodeArtifact for pip dependencies
        run: |
          aws codeartifact login --tool pip --domain revibe-energy --domain-owner  --repository revibe-repo

      - name: Install buf tooling
        uses: bufbuild/buf-setup-action@v1.17.0
        run: buf --version

      - name: Generate Python implementation
        run: |
          buf generate model

  deploy:
    name: Component deploy
    if: ${{ !startsWith(github.ref_name, 'no-deploy') }}
    runs-on: ubuntu-latest
    needs: reusable_publish_job
    environment: development
    permissions:
      id-token: write
      contents: write # write permissions needed to commit updated component version

    steps:
      - name: Get anura-version-bump-bot token
        id: anura-version-bump-bot
        uses: getsentry/action-github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v3
        # Since we update a file in this job, we need to get the latest version of the branch and not the version that triggered the workflow
        # which is the default behavior. Otherwise, 'git push' will fail
        # We also need a token with specific permissions to override the branch protection rules
        # in order to push commits in the workflow.
        with:
          ref: ${{ github.ref }}
          token: ${{ steps.anura-version-bump-bot.outputs.token }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.OIDC_ROLE_AWS_REGION }}

      - name: Update version in deployment template
        run: |
          contents=$(jq --arg LATEST_COMPONENT_VERSION "$LATEST_COMPONENT_VERSION" '.components.${{ inputs.component-name }}.componentVersion = $LATEST_COMPONENT_VERSION' deployment.json.template) && \
          echo -E "${contents}" > deployment.json.template
        env:
          LATEST_COMPONENT_VERSION: ${{needs.reusable_publish_job.outputs.published_version}}
        working-directory: ${{ env.working-directory }}./greengrass-components/

      - name: Commit & push updated deployment template
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add deployment.json.template
          git commit deployment.json.template -m "Bump version of ${{ inputs.component-name }} to ${{needs.reusable_publish_job.outputs.published_version}}"
          git push
        working-directory: ${{ env.working-directory }}./greengrass-components/

      - name: Deploy Greengrass component
        run: |
          export AWS_ACCOUNT_ID=$(aws sts get-caller-identity |  jq -r '.Account')
          export AWS_REGION=${{ secrets.OIDC_ROLE_AWS_REGION }}
          envsubst < "deployment.json.template" > "deployment.json"
          aws greengrassv2 create-deployment \
            --cli-input-json file://deployment.json \
            --region ${AWS_REGION}
        env:
          TARGET_THING_GROUP: ${{ vars.TARGET_THING_GROUP }}
          DEPLOYMENT_NAME: ${{ vars.DEPLOYMENT_NAME }}
        working-directory: ${{ env.working-directory }}./greengrass-components/
